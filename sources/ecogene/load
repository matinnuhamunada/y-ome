#!/usr/bin/env python3

from yome import Session
from yome.load import load_knowledgebase
from yome.util import apply_keyword

import pandas as pd
from os.path import dirname, realpath, join

directory = realpath(dirname(__file__))

# Load knowledgebase into dataframe
rename = {
   'EG': 'ecogene_id',
   'Gene': 'primary_name',
   'Syn': 'synonyms',
   'Protein': 'protein',
   'Function': 'function',
   'Description': 'description',
   'Comments': 'comments',
   'b#': 'locus_tag',
}
df = (pd.read_table(join(directory, 'EcoData110917-163845.tsv.gz'), header=0)
      .rename(columns=rename))

# Split synonyms
def split_synonym(s):
   return [y for y in (x.strip() for x in s.split(',')) if y != 'None']
df.synonyms = df.synonyms.apply(split_synonym)

# Strip columns
df['primary_name'] = df['primary_name'].str.strip()
df.locus_tag = df.locus_tag.str.strip()

# Add annotation_quality
df.loc[:, 'annotation_quality'] = 'tbd'

# Define keywords
low_keywords_description = [
   'physiological role unknown', 'uncharacterized', 'putative',
   'function unknown',
]
low_keywords_protein = [
    'putative', 'uncharacterized'
]

# Apply keyword annotations; description
for keyword in low_keywords_description:
    apply_keyword(df, keyword, 'description', False)

# Apply keyword annotations; protein
for keyword in low_keywords_protein:
    apply_keyword(df, keyword, 'protein', False)

# Define pseudogenes (must be a string type)
def is_pseudogene_cat(row):
    return 't' if row['primary_name'].endswith("'") else 'f'
df['is_pseudogene'] = df.apply(is_pseudogene_cat, axis=1)

# Phantom genes are excluded from y-ome description
df.loc[df.is_pseudogene == 't', 'annotation_quality'] = 'excluded'

# Import knowledgebase
session = Session()
load_knowledgebase(session, df, 'EcoGene',
                   locus_id_column='locus_tag',
                   primary_name_column='primary_name',
                   synonyms_column='synonyms',
                   feature_columns=['protein', 'function', 'description',
                                    'comments', 'is_pseudogene'],
                   annotation_quality_column='annotation_quality')
session.close()

print()
print('EcoGene')
print(df.annotation_quality.value_counts())
