#!/usr/bin/env python3

# Load genes from UniProt using the export file proteome_UP000000625_120817.tsv.gz

from yome import Session
from yome.load import load_knowledgebase
from yome.util import apply_keyword

import pandas as pd
from os.path import dirname, realpath, join
import re

# Load knowledgebase into dataframe
directory = realpath(dirname(__file__))

# Load knowledgebase into dataframe
rename = {
    'Entry': 'upid',
    'Gene names  (primary )': 'primary_name',
    'Gene names  (synonym )': 'synonyms',
    'Gene names  (ordered locus )': 'locus_tag',
    'Protein names': 'protein',
    'EC number': 'ec_number',
    'Catalytic activity': 'reaction',
    'Function [CC]': 'function',
    'Annotation': 'annotation_score',
    'Features': 'features',
    'Miscellaneous [CC]': 'misc',
}
df = (pd.read_table(join(directory, 'proteome_UP000000625_110618.tsv.gz'), header=0)
      .rename(columns=rename))

# Strip columns
df.primary_name = df.primary_name.str.strip()
df.upid = df.upid.str.strip()

# Pull out locus IDs
df.locus_tag = df.locus_tag.apply(lambda s: s.split()[0].strip() if not pd.isnull(s) else s)

# If primary name is null, use locus ID
def locus_for_name(row):
    return row['locus_tag'] if pd.isnull(row['primary_name']) else row['primary_name']
df.primary_name = df.apply(locus_for_name, axis=1)

# Keep annotation scores as numbers
df.annotation_score = df.annotation_score.map(lambda s: int(s.replace('out of 5', '')))

# Format synonyms
df.synonyms = df.synonyms.map(lambda s: [x.strip() for x in s.split()]
                                        if type(s) is str else [])

# Add annotation_quality
df.loc[:, 'annotation_quality'] = 'tbd'

# Genes with annotation_score 4 are "high"
df.loc[df.annotation_score >= 4, 'annotation_quality'] = 'high'

# Genes with annotation_score 2 are low
df.loc[df.annotation_score <= 2, 'annotation_quality'] = 'low'

# Genes with 3 are sometimes "high" with "experimental evidence at protein
# level", sometimes low with "Predicted protein"

# Add keywords, marking tbd for mismatches to annotation_score
low_keywords_protein = [
    'probable', 'uncharacterized', 'putative'
]
low_keywords_function = [
    'unknown', 'not known'
]

# Apply keyword annotations; protein
for keyword in low_keywords_protein:
    apply_keyword(df, keyword, 'protein', False)

# Apply keyword annotations; function
for keyword in low_keywords_function:
    apply_keyword(df, keyword, 'function', False)

# Genes with EC number not necessarily high. Some (e.g. yadI) have ec info event
# with minimal annotation
# df.loc[~df.ec_number.isnull(), 'annotation_quality'] = 'high'

# Import knowledgebase
session = Session()
load_knowledgebase(session, df, 'UniProt',
                   locus_id_column='locus_tag',
                   primary_name_column='primary_name',
                   synonyms_column='synonyms',
                   feature_columns=['upid', 'protein', 'ec_number', 'reaction',
                                    'function', 'features', 'misc',
                                    'annotation_score'],
                   annotation_quality_column='annotation_quality')
session.close()

print()
print('UniProt')
print(df.annotation_quality.value_counts())
